---
layout: post
title: "密码学统论"
published: false
date: 2014-06-29 13:10
---

# 术语

## 发送者和接收者

## 消息和加密

在密码学中, 消息 (message) 被称为明文 (plaintext), 用某种方法伪装消息以隐藏它的内容的过程成为加密 (encryption, 在 ISO 7489-2 标准中, 这一过程被称为 encipher), 被加密的消息成为密文 (ciphertext), 而把密文转变为明文的过程称为解密 (dectyption, ISO 7489-2 中成为 decipher).

明文用 M 或 P 表示, 它可能是**位序列, 文本文件, 位图, 数字化的语音序列或数字化的视频图像**等等. 对于计算机, M 指简单的二进制数据.

密文用 C 表示, 它也是二进制数据, 有时和 M 一样大, 有时稍大 (通过压缩和加密的结合, C 有可能比 M 小. 仅通过加密, 通常不会使 C 比 M 小).

加密函数 E 作用于 M 得到密文 C, 用数学公式表示如下:

> E(M) = C

相反的, 解密函数 D 作于于 C 得到 M:

> D(C) = M

先加密后再解密, 原始的明文将恢复, 故下面的等式是成立的:

> D(E(M)) = M

## 鉴别, 完整性和抵抗性

# 算法和密钥

## 受限算法

密码算法是用于加密和解密的数学函数. (通常情况下有两个函数, 一个用于加密, 一个用于解密)

如果算法的安全性基于对算法的保密性, 那么这种算法被称之为受限 (restricted) 算法. 受限算法具有历史意义, 但按现在的标准, 它们的保密性已远远不够. 大的或经常变换用户的组织不能使用他们, 因为如果有一个用户离开了这个组织, 其他的用户就必须改换另外不同的算法.

更糟的是, 受限算法不可能进行质量控制或标准化. 每个用户组织必须有他们自己的唯一算法. 这样的组织不可能采用流行的硬件或软件产品, 因为窃听者可以买到这些流行的产品并学习算法. 每个组织的算法不能被公开, 这样的话除非组织里有密码学的专家, 否则组织也不能确定自己的算法是不是安全.

## 基于密钥的算法

现代密码学用密钥 (key) 解决了这个问题, 密钥用 K 表示. K 可以是很多数值里的任意值, 密钥 K 的可能值范围叫做密钥空间 (keyspace). 加密和解密运算都使用这个密钥, 这样, 加/解密函数现在变成:

> 下面的 "k" 为下标
>
> Ek(M) = C
> Dk(C) = M
> Dk(Ek(M)) = M

有些算法使用不同的加密密钥和解密密钥, 在这种情况下:

> Ek1(M) = C
> Dk2(C) = M
> Dk2(Ek1(M)) = M

所有这些算法的安全性都基于密钥的安全性, 而不是基于算法的安全性. 这就意味着算法可以公开, 也可以被分析, 可以生产大量使用算法的产品.

基于密钥的算法通常有两类: 对称算法和公开密钥算法.

### 对称算法

对称算法的加密密钥和解密密钥是能够相互推导的, 知道其中任何一个都可以推出另一个. 不过在大多数的对称算法中, 加/解密密钥直接就是相同的.

这种算法也叫做秘密密钥算法, 因为算法的安全性依赖于密钥, 所以密钥不能让别人知道.

对称算法还可以分为两类: 一次只对明文中的单个位 (或单个字节) 运算的算法称为序列算法; 一次对明文的一组位进行运算的算法成为分组算法. 现代计算机密码算法的典型分组长度为 64 位.

### 公开密钥算法

在公开密钥算法 (也叫做非对称算法) 中, 用作加密的密钥不同于用作解密的密钥, 而且它们两者不能相互推导出来. 之所以叫做公开密钥算法, 是因为加密密钥能够公开, 陌生人也可以用加密密钥加密信息, 但只有用相应的解密密钥才能解密信息. 加密密钥也叫做公钥 (public key), 解密密钥也叫做私钥 (private key).

有一种情况, 消息用私钥加密, 而用公钥解密. 这是用于数字签名的情况.

## 计算机算法

计算机密码算法有多种, 最通用的有以下三种:

1.  DES (Data Encryption Standard, 数据加密标准) 是最通用的计算机加密算法. DES 是美国和国际标准, 是对称算法, 加密密钥和解密密钥相同.
2.  RSA (根据其发明者命名) 是最流行的公开密钥算法, 它用做加密和数字签名.
3.  DSA (Digital Signature Algorithm, 数字签名算法, 是数字签名标准的一部分) 是另一种公开密钥算法, 不过他不用做加密, 只用做数字签名.

## 单向函数

单向函数 (one-way function) 的概念是公开密钥系统的核心. 单向函数算起来容易, 但是其逆运算非常困难, 之所以只是说 "非常困难" 而不是说 "不可能", 是因为在数学上, 并不能证明单向函数的存在性, 也没有证据能够构造出单向函数. 但是还是有很多的函数看起来像单向函数, 至少它们的逆运算非常困难, 能够达到耗尽地球上的计算机资源都需要几百万年才能完成这个逆运算.

### 陷门单向函数 (trapdoor one-way function)

或者你可以理解它为 "后门单向函数", 顾名思义就是具有后门的单向函数, 它同样也是正向计算容易, 但逆向计算非常困难. 但是, 他有一个后门, 如果你知道那个后门, 那么逆向运算也会很容易.

更准确的讲, 陷门单向函数才是公钥系统的核心.

## 单向散列函数

散列函数的特点是能够将可变长度的输入, 转换为固定长度的输出. 散列函数的名字很多: 压缩函数, 信息摘要, 校验和等等.

通过上面的特性你可以看出, 散列函数是一种多到一的函数, 因此不能用它来确定两个串一定相同 (不同的串也可能得到相同的摘要). 但是, 好的散列函数能做到几乎的无冲突, 很难找到两个不同的串, 使它们的散列值相同. 因此单向散列函数常常用做文件的指纹验证.

如果你想要验证某人持有一个特定的文件 (你同时也有这个文件), 但他不想将文件传给你, 那么可以让他将文件的散列值传给你, 如果他给你的散列值是正确的, 那么几乎就可以肯定的说他确实拥有那个文件.

[Cifer 注: 现在很多网站分发软件的时候, 为了确保用户下载的软件确实是自己分发的 (而没有在下载过程中被篡改), 常常会提供该软件的不同散列算法得出的散列值]
