<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C on</title><link>cifer76.github.io/categories/c/</link><description>Recent content in C on</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 07 Nov 2015 21:01:45 +0000</lastBuildDate><atom:link href="cifer76.github.io/categories/c/index.xml" rel="self" type="application/rss+xml"/><item><title>(译) 如何使用 C 语言中的 volatile 关键字</title><link>cifer76.github.io/posts/c-volatile/</link><pubDate>Sat, 07 Nov 2015 21:01:45 +0000</pubDate><guid>cifer76.github.io/posts/c-volatile/</guid><description>(原文: http://www.barrgroup.com/Embedded-Systems/How-To/C-Volatile-Keyword, 已取得翻译许可)
很多 C 程序员都不真正懂得 volatile 关键字的用法. 这无需奇怪, 因为大多数的 C 教程对 volatile 的介绍都比较简单. 这篇文章的目的就是告诉你 volatile 的正确使用方式
你有碰到过下面的几个情形吗?
代码编译运行没问题 &amp;mdash; 直到你打开了编译器优化 代码运行的很好 &amp;mdash; 直到一个中断发生 古怪的硬件驱动程序 RTOS task 各自单独运行时很好 &amp;mdash; 直到有其它 task 被 spawned 如果你碰到过上述任何一个问题, 那么就可能是你没有使用 volatile 关键字的原因. 你并不孤单, volatile 关键字为很多程序员所不熟悉. 不幸的是, 很多 C 相关的书籍都没有好好的介绍 volatile 关键字.
volatile 关键字和 const 一样, 是一个限定符, 用于一个变量被声明时. 它告诉编译器, 被声明的变量的值可能随时都会被改变 &amp;ndash; 就算使用这个变量的代码的附近 (附近有多近, 要看编译器了, 可能是同一个源文件) 没有任何修改这个变量值的语句也是如此. 给编译器的这个暗示是很严肃的, 在我们继续讲解之前, 我们先来看一下 volatile 的语法.
volatile 关键字的语法 要将一个变量声明为 volatile 的, 需要在声明时将 volatile 关键字写到数据类型关键字的前面或后面.</description></item></channel></rss>