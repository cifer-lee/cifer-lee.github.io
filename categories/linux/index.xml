<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on</title><link>https://cifer76.github.io/categories/linux/</link><description>Recent content in Linux on</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 02 May 2015 11:27:31 +0000</lastBuildDate><atom:link href="https://cifer76.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>PAM, su 以及 wheel 用户组</title><link>https://cifer76.github.io/posts/pam-su-wheel-group/</link><pubDate>Sat, 02 May 2015 11:27:31 +0000</pubDate><guid>https://cifer76.github.io/posts/pam-su-wheel-group/</guid><description>在我的 gentoo 系统下, su 使用 pam 模组, 要求只有处于 wheel 用户组的普通用户才能够使用 su 切换到 root 用户的权限. 如果你查看 /etc/pam.d/su, 可以看到下面这一行:
auth required pam_wheel.so use_uid 但是 GNU su 不支持 wheel 用户组, 也就是说, 如果你使用的是 GNU su, 那么当你 (普通用户) 执行 GNU su 来切换到 root 权限时, GNU su 不会检查你是否是 wheel 用户组的一员, 只要你给出了 root 用户的密码就能够切换成功.
这是怎么实现的呢, 可以看出, 上面那一行 pam 规则中, flag 值用的是 required, required 这个值在这里表示不管 pam_wheel.so 模块的检查结果是成功还是失败, 后续的检查都会继续运行下去, 那么 GNU su 只要忽略 pam_wheel.so 的检查结果就可以了. 而其他的 su 实现, 则不会忽略 pam_wheel.</description></item><item><title>挂载 (mount) 深入理解</title><link>https://cifer76.github.io/posts/mount-illustration/</link><pubDate>Tue, 06 May 2014 00:00:00 +0000</pubDate><guid>https://cifer76.github.io/posts/mount-illustration/</guid><description>首先引用一句 wiki 上的定义来开篇:
Mounting takes place before a computer can use any kind of storage device (such as a hard drive, CD-ROM, or network share). The user or their operating system must make it accessible through the computer&amp;rsquo;s file system. A user can only access files on mounted media.
意思是说, &amp;ldquo;挂载&amp;rdquo; 发生在计算机想要使用任何类型的存储设备 (如硬盘, CD-ROM, 网络设备) 之前. 操作系统必须将这个设备纳入自己的文件系统中去.
要注意的是, 这里的存储设备不一定必须是外部的存储设备, 也可以是你安装系统的硬盘上的分区.
例子先 光看上面说的还不够, 先看个例子吧, 这个例子摘自 man mount, 在 man 手册中这个例子下的一句话非常好的解释了 mount 到底是什么.</description></item><item><title>Linux C 中如何正确的判断一个文件/目录文件是否存在</title><link>https://cifer76.github.io/posts/howto-detect-file-exists/</link><pubDate>Sun, 06 Apr 2014 14:59:00 +0000</pubDate><guid>https://cifer76.github.io/posts/howto-detect-file-exists/</guid><description>source: http://stackoverflow.com/questions/230062/whats-the-best-way-to-check-if-a-file-exists-in-c-cross-platform
其实不光是在 Linux 下编程, 在其他平台下我们都会有这样的需求: 我们要为应用程序创建自己的数据或者日志目录, 应用程序在每次启动时会检查文件系统中是否已经有了自己的目录, 没有的话就创建它, 有了的话就跳过这一步. 那么如何去判断文件系统中是否已经存在了要创建的目录呢?
Linux 或者 GNU C 都没有提供一个像 file_exists() 这样直观的系统调用给我们, 所以我们得通过其它的调用来达成这个目标.
实际上当我第一次要解决这个问题时, 我先 google 了一下, 这个问题在 stackoverflow 上有人问过而且非常受欢迎, 很多人对这个问题又点赞又收藏的, 自然, 这个问题也收到了不少好的答案, 这篇文章算是对这些好答案的总结和延伸.
我们先来看一个大家都应该知道的方式, 第一种方式:
fopen() fopen() 方法是流阶级的方法, 这个方法接收用户提供的文件名, 以及访问方式, 然后尝试着打开文件, 打开成功则返回 handle, 失败则返回 NULL. 因此有人提出了使用这个方法来判断指定的文件是否存在的方案:
#include &amp;lt;stdio.h&amp;gt; ... FILE *fp = NULL; fp = fopen(&amp;quot;/tmp/test/somefile&amp;quot;, &amp;quot;r&amp;quot;); if(fp) { // exists } else { // not exists } fclose(fp); 这也是 stackoverflow 上唯一一个得负分的答案, 这个方案的问题在于它没有考虑到文件权限的问题, 而 fopen() 这个函数又是如此的简单 &amp;mdash; 不管因为什么原因打开文件失败了, 它只是返回 NULL 给你, 不会提供更多的错误信息.</description></item><item><title>搞定 HP MicroServer 的 Smart Array Controller B120i 磁盘阵列, 在安装 RHEL 时</title><link>https://cifer76.github.io/posts/work-through-raid-in-rhel/</link><pubDate>Wed, 22 Jan 2014 09:48:00 +0000</pubDate><guid>https://cifer76.github.io/posts/work-through-raid-in-rhel/</guid><description>MicroServer Gen8 是 HP 服务器里较新的一个系列, 其所配备的磁盘阵列卡 &amp;mdash; Smart Array Controller B120i, 也是比较新的一种阵列卡, 目前 HP 仅提供了 RHEL, OpenSUSE, Microsoft 的驱动程序.
我们就是要在 MicroServer Gen8 上安装 RHEL6.
MicroServer Gen8 的主板上的 ROM 上搭在了一个小型的配置系统, 叫做 Intelligence Provisioning, 在这里你可以对磁盘阵列进行分区(正如 hardware raid 都会带有一个控制系统来管理自己的说法一样), 还可以配置你要安装的操作系统(不过在通过这个配置你可以安装的系统有限, 仅限于 HP 提供了阵列卡驱动的那些系统), 还带了一些系统健康状态监控的功能.
对于上述的几个可以在 Intelligence Provisoning 中配置的操作系统, MicroServer Gen8 似乎都提供了他们的安装程序, 这点比较方便, 因为在 Intelligence Provisioning 中配置好我们想安装的操作系统之后, 重启机器就回进入这个操作系统的安装界面, 然后你只需要提供操作系统的镜像就可以继续你的安装. 但是 Gen8 预置的 RHEL 操作系统安装程序却是有一个严重的不如人意的地方, 稍候我会说明这一点.
众所周知, 安装软件时, 一般来说这个软件会提供一个安装程序, 我记得 windows 下以前最火的制作安装程序的软件叫 InstallShield 不知现在还是不是最火的, 使用这个软件就可以制作出那种傻瓜化的一路下一步的软件安装程序, 而 linux 下的安装程序, 应该就得算各种包管理系统或者是.</description></item><item><title>从 Redhat Enterprise Linux 迁移到 CentOS (让 RHEL 使用 CentOS 的源)</title><link>https://cifer76.github.io/posts/rhel-server-migrate-to-centos/</link><pubDate>Fri, 17 Jan 2014 00:00:00 +0000</pubDate><guid>https://cifer76.github.io/posts/rhel-server-migrate-to-centos/</guid><description>这篇文章里我们讨论从 RHEL 到 CentOS 的迁移, 文章标题之所以加了个括号注明&amp;quot;让 RHEL 使用 CentOS 的源&amp;quot;, 是因为这两个过程所作的工作基本是一样的. 关于迁移过程 CentOS 官方的 MigrationGuide 说的很清楚, 但是这篇文章有点老, 而且这篇文章针对的是 RHEL 普通版, 而不是针对 RHEL Server 版, 所以文章里的几个地方我需要纠正一下.
在这之前, 先解释几个问题:
为什么我们要从 RHEL 迁移到 CentOS
这是因为 RHEL 是收费的, 是的, 虽然你能够免费下载和安装 RHEL, 但是如果你想在上面安装其他的软件以及获取软件升级, 系统补丁等, 那就要交钱了, 你通过购买 subscriptions 来获取这些服务. CentOS 是 Community redhat Enterprise linux OS 的简称, 可以看出它是&amp;quot;社区版的 RHEL&amp;quot;, 不收钱.
为什么不直接安装 CentOS
我们使用的 HP Proliant MicroServer Gen8, 使用了较新的磁盘阵列卡 - Smart Array Controller B120i, 这种磁盘阵列 HP 只提供了 OpenSUSE 和 RHEL 的驱动程序, 我们在安装系统的时候, 并不知道 CentOS 是 100% 的 RHEL, 即使我们知道, 我们也不敢认为 HP 提供的 RHEL 版本的驱动程序能良好的为 CentOS 使用.</description></item><item><title>GNU Screen Tutorial</title><link>https://cifer76.github.io/posts/gnu-screen-tutorial/</link><pubDate>Mon, 13 Jan 2014 00:00:00 +0000</pubDate><guid>https://cifer76.github.io/posts/gnu-screen-tutorial/</guid><description>概念 会话, screen 有自己的会话的概念, 当你运行 screen 命令后, 你就启动了一个 &amp;ldquo;会话&amp;rdquo;. 下文中的&amp;quot;会话&amp;quot;都是指 screen 会话. 窗口, 每一个会话可以包含一至多个窗口, 在每一个窗口中, 你可以做单独的工作. 比如说在窗口1 中开着 vim 写作, 在窗口2 中运行 netstat 监控网络, 而第三个窗口保持 bash shell 不做其他的事 默认情况下, 当你运行 screen 之后, screen 将为你建立一个会话, 并且为你建立一个默认的窗口, 并且, 为你在这个窗口中运行 bash shell.
优点 使用 screen 的优点是很多的, 尤其是你需要 ssh 登录到远程主机进行工作的时候, screen 可以帮助你使你即使从远程主机退出了, 你的工作也能够继续, 这是其一, 另一点就是它可以帮你&amp;quot;节省终端&amp;quot; - 当你需要登录远程做多个工作的时候, 你不必开多个终端分别 ssh 登录远程, 然后分别做各自的工作. 这在 多个窗口 这一节会分析.
运行 screen 只需要简单的执行 screen 命令:
$ screen 一般来说, 你会看到一屏关于 screen 程序的介绍和版权信息, 根据按空格或回车就能跳过.</description></item><item><title>初入 pcDuino</title><link>https://cifer76.github.io/posts/pcduino-getting-started/</link><pubDate>Thu, 02 Jan 2014 00:00:00 +0000</pubDate><guid>https://cifer76.github.io/posts/pcduino-getting-started/</guid><description>网上关于 pcDuino 的教程相对其他板子来说还较少, 尤其是 Getting Started 这一块, 官方的网站上关于这一话题的惟一一篇文章只是介绍如何通过 Ethernet over USB OTG 连接到板子, 而且还是只针对 windows 用户, 要不是当时正好我旁边闲着一台 windows 的机器, 加上我现在已经&amp;quot;厌倦了折腾&amp;quot;, 我才不会去尝试用 windows 去连接它.
当我尝试按照官网的教程做的时候, 我被卡在了第一步, 每当我反复的把一端接着 pcDuino OTG 口的 USB 线插入 win PC 时, windows 右下角就弹出个带着红叉的气泡告诉我这个硬件设备不能被安装/不能被识别, 也可以理解, Ethernet over USB 这东西我之前也没听过, 大概比较新, win 肯定没有内置驱动, 于是我开着驱动精灵检测 PC 上的硬件设备, 我一直觉得这是能够进入 windows 下十佳好用软件的软件, 可令人失望的是驱动精灵也不能检测出电脑 USB 口上插的是个 Ethernet 设备, 之所以检测不出我觉得可能是驱动精灵的驱动库里也没有这个驱动. 那看来只能我手动在网上搜驱动了, 我尝试着 google 了一下 &amp;ldquo;usb ethernet driver&amp;rdquo; 检索结果不太令人满意, pcDuino 的入门教程这块做的太不好了, 仅有的这篇教程里, 就不能给个驱动的下载地址么?
最后, 我很不屑的放弃了在 windows 下继续折腾.</description></item></channel></rss>