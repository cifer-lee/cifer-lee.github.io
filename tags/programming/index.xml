<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on</title><link>cifer76.github.io/tags/programming/</link><description>Recent content in programming on</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 07 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="cifer76.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust 里的单例模式</title><link>cifer76.github.io/posts/rust-singleton/</link><pubDate>Sat, 07 Nov 2020 00:00:00 +0000</pubDate><guid>cifer76.github.io/posts/rust-singleton/</guid><description>Rust 要想搞个单例模式还真是曲折.
单例模式说到底就是全局变量, 在别的语言很容易实现, 但是在 rust 里则诸多不便, 因为 rust 这门语言从设计上就是要避免使用全局变量的. 实际上 Rust 里就没有全局变量的概念, 只有生命周期的概念, 全局变量某种意义上也就是具有整个运行时周期的静态变量, 如果我们真的要定义全局变量, 那就用 static 关键字. 后面我们姑且不论全局变量和静态变量的区别, 统一用静态变量的说法.
Rust 的 static 关键字和 C/C++ 语言一样, 代表变量的生命周期是整个运行时, 但是相比 C/C++ rust 的 static 有一个限制: 必须使用编译时期能够确定的值初始化. 刚看到着点有点想吐槽, 这不就跟 const 常量有点像了么, 不过一想这应该也是 rust 为了安全考虑, 防止运行时有多处地方想要初始化这个静态变量. 但是给我们造成的麻烦可就不小了, 具体麻烦程度取决于我们需不需随后在运行时修改这静态变量的值, 需要分别讨论.
如果我们运气好不需要运行时修改静态变量, 意味着变量声明不用加 mut, 那就很好, 虽然这种情况其实直接用 const 就行了&amp;hellip; 但总之看起来至此需求满足了, 讨论可以结束? 很遗憾并没有.
往往我们用单例模式都是要和系统资源打交道的, 比如网络连接, 文件描述符等, 这些系统资源当然本身是不支持同步访问的, 需要上层有一种机制保证对他们的访问是同步的. 对于 unmutable 的静态变量, rust 会编译时检查这个变量类型是否本身支持同步访问, 支持则已, 不支持则会报错. 不愧是 rust, 多么的严谨哦~ 那 rust 是怎么检查的呢?</description></item></channel></rss>