<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>bitcoin on</title><link>https://cifer76.github.io/tags/bitcoin/</link><description>Recent content in bitcoin on</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 21 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cifer76.github.io/tags/bitcoin/index.xml" rel="self" type="application/rss+xml"/><item><title>Gold Mining</title><link>https://cifer76.github.io/posts/gold/</link><pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate><guid>https://cifer76.github.io/posts/gold/</guid><description>Relating concepts Gold grade Gold grade is a term used in gold mining, and should be used as a measure of the quality of gold ore – that is the raw material obtained from mining.
The grade of mined, raw gold ore is measured in grams of gold per tonne of ore. High grade gold ore contains more gold per tonne; this means that more gold is obtained from every tonne mined.</description></item><item><title>比特币隐私加固 - CoinJoin 技术简析</title><link>https://cifer76.github.io/posts/bitcoin-coinjoin/</link><pubDate>Tue, 28 Nov 2017 00:00:00 +0000</pubDate><guid>https://cifer76.github.io/posts/bitcoin-coinjoin/</guid><description>思想 由 @gmaxwell 在 CoinJoin: Bitcoin privacy for the real world 一文提出. 核心思想就是利用比特币的一笔交易中可以有多个输入以及多个输出这一点, 将多笔交易合并, 使得让人难以分辨哪笔输入对应哪笔输出, 进而达到难以追踪某个地址的资金的来源或去向的目的.
CoinJoin 思想的通俗实践是, 当你想要转账时, 可以找到另外一些也想转账的人, 你们分别签名自己的输入共同创建一笔交易. 这就需要掺入一点点中心化来支持, 对于个人钱包来说并不太好实践, 但对于具有中心服务的 web 钱包提供商来说比较容易, web 钱包可以很容易的将多个用户的转账请求合并, 作为一笔交易广播出去, 比如 blockchain.info.
CoinJoin 不需要更改比特币固有协议, 后续的许多旨在提高交易私密性的技术都是基于 CoinJoin 的思想.
实现 前面说 blockchain.info 有采用了 CoinJoin, 实际上 blockchain.info 实现的是 Shared Coin &amp;mdash; 一个对 CoinJoin 思想的最简单的实现, 当我们在 blockchain.info 上创建交易时, blockchain.info 会自动将其与其他人发起的交易合并成为一笔.
不过 Shared Coin 后来被研究出交易中的记录仍然是可追溯的, 因此 blockchain.info 下线了 Shared Coin 技术: https://www.coindesk.com/blockchains-sharedcoin-users-can-identified-says-security-expert/
其他对 CoinJoin 思想的实现技术还有 Dark Wallet, CoinShuffle, 达世币中的 PrivateSend 等等.</description></item><item><title>什么是比特币的链上 (on-chain) 与链下 (off-chain) 交易, 以及往交易所充币后发生了什么</title><link>https://cifer76.github.io/posts/bitcoin-on-off-chain/</link><pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate><guid>https://cifer76.github.io/posts/bitcoin-on-off-chain/</guid><description>on-chain on-chain 就是比特币的常规交易方式: 给我一个比特币地址 (公钥), 我用客户端创建交易发送比特币给你, 这笔交易在全网广播, 被确认, 被打包进区块. 显然, 交易是直接发生在链上的.
off-chain 至于 off-chain 其实玩过比特币的人也都用过, 我们在交易所里的交易就是 off-chain 交易. 这是如何运作的呢?
A, B 分别在某交易所开户, 交易所会分别为 A, B 生成一对公钥私钥, 但是 A 和 B 都不知道平台给他们生成的私钥, 只知道自己的公钥. 然后, A 和 B 用自己的钱包往平台给他们开的公钥地址里冲值比特币, 注意这个操作依然是 on chain 的.
再然后, A 通过交易所转了 0.5BTC 给 B, 但由于 A 没有私钥, 所以需要交易所拿 A 的私钥去签名并广播这个交易, 然而交易所真的需要去广播这个交易吗? 不需要的, 交易所只需要在自己的数据库里, 将 A 的账户余额 -0.5BTC, 将 B 的账户余额 +0.5BTC. 这一步, 只是交易所自己维护的信息在更新, 没有上链, 所以这个操作是 off chain 的.</description></item><item><title>Bitshares 中的账户与权限个人理解</title><link>https://cifer76.github.io/posts/bitshares-account-mechanism/</link><pubDate>Sat, 16 Sep 2017 00:00:00 +0000</pubDate><guid>https://cifer76.github.io/posts/bitshares-account-mechanism/</guid><description>单一账户模型 在这个模型下, 我们提供一个登录名以及密码, 系统会根据登录名+密码生成确定的私钥, 所以用这种模式创建的账户, 可以在任何设备上用登录名+密码登录.
钱包模型 钱包模型的好处是, 钱包可以包含多个账户, 这些个账户的私钥全都保存在此钱包中, 用钱包在任何地方登陆都能获得你所有的账户. 但是有个不方便的地方是登录需要使用钱包文件, 不如直接输登录名密码来得方便 (较新的客户端可以用 brainkey 恢复钱包, 但 brainkey 还是没有输入登录名密码方便).
钱包模型下支持给钱包中的账户新创建三个私钥, 创建时需要提供一个密码, 新建的私钥是根据账户名+密码生成的, 三个私钥分别控制着账户的三个权限 (具体见下文). 如此一来, 钱包中的这个账户就变得好像和单一账户模型中申请的账户一样了. 这个功能能够方便我们使用账户名和密码在其他设备上登录我们的账号.
权限 bitshares 天然对多重签名有良好的支持, 其设计为将每个账户的花钱的权限分离出来, 我们可以为某个账户配置更多的私钥或者其它账户, 并为这些私钥或者其他账户设定不同的权重, 同时设定一个阈值, 要花这个账户的钱, 需要权重大于设定的阈值才可以.
bitshares 目前划分了三级与账户相关的权限, 上面说的花钱的权限是一级. 另外还有 memo 权限, 创建交易时附加的 memo 可以用单独的私钥签名, 这项权限目前还不支持多重签名, 貌似也没必要. 最后一项是最重要的权限, 即对整个账户的控制权, 这个权限能够修改账户的各种信息, 配置, 包括权限配置, 这项权限当然也是支持多重签名的.
参考 官方这两个链接值得一读
http://docs.bitshares.org/bitshares/user/account.html http://docs.bitshares.org/bitshares/user/account-permissions.html</description></item><item><title>比特币地址, 公钥与私钥的格式以及如何保证比特币不丢失</title><link>https://cifer76.github.io/posts/what-is-bitcoin-address-how-to-protect-it/</link><pubDate>Fri, 01 Sep 2017 00:00:00 +0000</pubDate><guid>https://cifer76.github.io/posts/what-is-bitcoin-address-how-to-protect-it/</guid><description>我们知道在公钥加密体系中, 由私钥推出公钥很容易反过来却是不可能的, 借助一些伟大的数学算法可以实现这一特性, 比特币使用的算法叫做椭圆曲线算法.
在比特币中私钥就是一个 256bit 的数字, 得到这个数字的方法有很多, 最简单的就是随机法, 比如掷硬币 256 次, 将结果作为私钥. 得到了私钥之后对其执行椭圆曲线算法, 我们就得到了对应的公钥, 公钥是 一对 坐标: (x, y) 以及 (x, -y), 其中 x, y 都是 256bit 的数字, 所以公钥的长度有两种情况:
512bit - 同时记录了 x, y 256bit - 记录 x 以及 y 的符号, 这需要一点点额外的运算来算出 y 公私钥编码 如果用 2 进制, 即便是 16 进制来写出公钥或私钥的话, 那结果是很长的, 比较不方便. 因此我们所见到的公私钥一般都是格式化过或压缩过的.
从 bitcoin core 开始, 比特币客户端使用的格式有 WIF (Wallet Import Format) 以及 WIF-compressed. WIF 格式使用 Base58 编码公私钥.</description></item></channel></rss>