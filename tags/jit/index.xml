<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JIT on</title><link>/tags/jit/</link><description>Recent content in JIT on</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 10 Dec 2018 00:00:00 +0000</lastBuildDate><atom:link href="/tags/jit/index.xml" rel="self" type="application/rss+xml"/><item><title>对解释器与 JIT 的一点思考</title><link>/posts/jit/</link><pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate><guid>/posts/jit/</guid><description>我一直知道解释器与编译器的区别. 编译器是事先将代码编译成机器码, 然后直接送进内存让 cpu 执行, 解释器则是解释执行代码, 可能会将代码先转换成一种中间码, 但我一直有一个误区就是解释器在解释执行的时候会把源代码或者中间码转成机器码, 也直接交由 cpu 执行, 然而我错了. 解释器是不会把源代码或者中间码转换成机器码的, 源代码或者中间码是直接在解释器内部的虚拟机上执行的.
当我认识到这一点之后, 我首先想到的虚拟机怎么实现的基本操作? 比如不借助 cpu 中的 ALU (加法器), 虚拟机怎么实现加法操作? 比如 2 + 3 这个表达式, 在词法分析后得到 &amp;ldquo;2&amp;rdquo; &amp;ldquo;+&amp;rdquo; &amp;ldquo;3&amp;rdquo; 三个 token, 虚拟机可以知道这是加法, 但是它怎么知道 &amp;ldquo;2&amp;rdquo; 和 &amp;ldquo;3&amp;rdquo; 分别代表多少? 2 + 3 它要怎么计算? 这是虚拟机无法模拟的. 略加思考, 我明白了, 试想一下, 虚拟机是什么语言写的? 虚拟机又是运行在哪里?
对的, 虚拟机本质上还是一坨直接运行于 cpu 之上的机器码, 当它拿到 &amp;ldquo;2&amp;rdquo; &amp;ldquo;+&amp;rdquo; &amp;ldquo;3&amp;rdquo; 的时候, 就直接讲这道题交给 cpu 的 ALU 去完成了, 然后取得结果作为它所解释的程序的运行结果.
那么 JIT (Just in Time) 是什么呢? JIT 实际上还是将源代码编译成机器码交由 cpu 执行.</description></item></channel></rss>